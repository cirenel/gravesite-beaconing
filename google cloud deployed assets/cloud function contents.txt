// see
// https://www.chirpstack.io/gateway-bridge/integrate/gcp-cloud-iot-core/
// https://medium.com/google-cloud/cloud-iot-step-by-step-cloud-to-device-communication-655a92d548ca
// for original incarnation 

//INDEX.JS
'use strict';

const {google} = require('googleapis');

// configuration options
const REGION = 'us-central1';
const PROJECT_ID = 'cemmap-276514';
const REGISTRY_ID = 'beaconcoord';


let client = null;
const API_VERSION = 'v1';
const DISCOVERY_API = 'https://cloudiot.googleapis.com/$discovery/rest';


// getClient returns the GCP API client.
// Note: after the first initialization, the client will be cached.
function getClient (cb) {
  if (client !== null) {
    cb(client);
    return;
  }

  google.auth.getClient({scopes: ['https://www.googleapis.com/auth/cloud-platform']}).then((authClient => {
    google.options({
      auth: authClient
    });

    const discoveryUrl = `${DISCOVERY_API}?version=${API_VERSION}`;
    google.discoverAPI(discoveryUrl).then((c, err) => {
      if (err) {
        console.log('Error during API discovery', err);
        return undefined;
      }
      client = c;
      cb(client);
    });
  }));
}


// sendMessage forwards the Pub/Sub message to the given device.
exports.sendMessage = (event, context, callback) => {
  const deviceId = 'coord';//event.attributes.deviceId;
  var randBeacons = ['A','B','C']; //pick a random beacon to send to. TODO: best beacon to light needs to be selected from historical list of connected beacons. data note yet sent to core.
  var randIndex = Math.floor(Math.random() * 3);
  var rb = 'beacon'+randBeacons[randIndex];
  const subFolder = rb;//event.attributes.subFolder;
  const finalMsg = "turn on";
  const msgData = Buffer.from(finalMsg).toString('base64');

  //const data = event.data; //("bleh.").toString('base64');
  console.log("event data "+event.data);
  console.log("beacon to light: " +subFolder);

  getClient((client) => {
    const parentName = `projects/${PROJECT_ID}/locations/${REGION}`;
    const registryName = `${parentName}/registries/${REGISTRY_ID}`;
    const request = {
      name: `${registryName}/devices/${deviceId}`,
      binaryData: msgData,
      subfolder: subFolder
    };
    
    console.log("start call sendCommandToDevice");
    client.projects.locations.registries.devices.sendCommandToDevice(request, (err, data) => {
      if (err) {
        console.log("Could not send command:", request, "Message:", err);
        callback(new Error(err));
      } else {
        
        callback();
      }
    });
  });
};



//PACKAGE.JSON
{
  "name": "gateway-commands",
  "version": "2.0.0",
  "dependencies": {
    "@google-cloud/pubsub": "0.20.1",
    "googleapis": "34.0.0"
  }
}